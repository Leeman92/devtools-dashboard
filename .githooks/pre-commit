#!/bin/bash

# DevTools Dashboard - Pre-commit Hook
# Validates documentation, configuration, and dependencies before commit

set -e

echo "üîç Running pre-commit validation..."

# Change to project root
cd "$(git rev-parse --show-toplevel)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Track validation status
VALIDATION_FAILED=false

# 1. Validate setup and dependencies
print_status $YELLOW "üìã Validating setup and dependencies..."
if ./scripts/validate-setup.sh > /dev/null 2>&1; then
    print_status $GREEN "‚úÖ Setup validation passed"
else
    print_status $RED "‚ùå Setup validation failed"
    echo "Run: ./scripts/validate-setup.sh"
    VALIDATION_FAILED=true
fi

# 2. Check composer files are in sync
print_status $YELLOW "üéº Checking composer files..."
cd backend
if docker run --rm -v "$(pwd):/app" -w /app composer:latest validate --strict > /dev/null 2>&1; then
    print_status $GREEN "‚úÖ Composer files are valid"
else
    print_status $RED "‚ùå Composer files are invalid or out of sync"
    echo "Run: ./scripts/docker-php.sh update"
    VALIDATION_FAILED=true
fi
cd ..

# 3. Check if Docker socket configuration is consistent
print_status $YELLOW "üê≥ Checking Docker socket configuration..."

# Check docker-compose.yml has socket mount
if grep -q "/var/run/docker.sock:/var/run/docker.sock:ro" docker-compose.yml; then
    print_status $GREEN "‚úÖ docker-compose.yml has Docker socket mount"
else
    print_status $RED "‚ùå docker-compose.yml missing Docker socket mount"
    VALIDATION_FAILED=true
fi

# Check docker-stack.yml has socket mount and manager constraint
if grep -q "/var/run/docker.sock:/var/run/docker.sock:ro" docker-stack.yml && \
   grep -q "node.role == manager" docker-stack.yml; then
    print_status $GREEN "‚úÖ docker-stack.yml has proper Docker socket configuration"
else
    print_status $RED "‚ùå docker-stack.yml missing Docker socket mount or manager constraint"
    VALIDATION_FAILED=true
fi

# 4. Check environment variable documentation is up to date
print_status $YELLOW "üåç Checking environment variable documentation..."

# Extract required vars from services.yaml
REQUIRED_VARS=$(grep -o "env([^)]*)" backend/config/services.yaml | sed 's/env(string://' | sed 's/env(//' | sed 's/)$//' | sed 's/default:[^:]*:string://' | sort -u)

# Check if all required vars are documented in README
MISSING_VARS=""
for var in $REQUIRED_VARS; do
    if ! grep -q "$var" backend/README.md; then
        MISSING_VARS="$MISSING_VARS $var"
    fi
done

if [ -z "$MISSING_VARS" ]; then
    print_status $GREEN "‚úÖ All environment variables are documented"
else
    print_status $RED "‚ùå Missing environment variables in documentation: $MISSING_VARS"
    VALIDATION_FAILED=true
fi

# 5. Check if API endpoints in controllers match documentation
print_status $YELLOW "üîó Checking API endpoint documentation..."

# Extract routes from controllers
CONTROLLER_ROUTES=$(find backend/src/Controller -name "*.php" -exec grep -h "#\[Route(" {} \; | grep -o "'/[^']*'" | sort -u)

# Check if major routes are documented
MAJOR_ROUTES="/api/docker/services /api/github /api/infrastructure/health"
MISSING_ROUTES=""

for route in $MAJOR_ROUTES; do
    if ! grep -q "$route" backend/README.md; then
        MISSING_ROUTES="$MISSING_ROUTES $route"
    fi
done

if [ -z "$MISSING_ROUTES" ]; then
    print_status $GREEN "‚úÖ Major API routes are documented"
else
    print_status $YELLOW "‚ö†Ô∏è  Some API routes may need documentation updates: $MISSING_ROUTES"
fi

# 6. Check if .cursorrules mentions Docker socket best practices
print_status $YELLOW "üìù Checking .cursorrules for Docker socket guidelines..."
if grep -q "Mount Docker socket read-only" .cursorrules && \
   grep -q "manager node constraints" .cursorrules; then
    print_status $GREEN "‚úÖ .cursorrules includes Docker socket best practices"
else
    print_status $RED "‚ùå .cursorrules missing Docker socket best practices"
    VALIDATION_FAILED=true
fi

# 7. Check if environment generation script is up to date
print_status $YELLOW "üîê Checking environment generation script..."
if [ -f "scripts/deployment/generate-env-file.sh" ]; then
    # Extract required vars from services.yaml
    SERVICES_VARS=$(grep -o "env([^)]*)" backend/config/services.yaml | sed 's/env(string://' | sed 's/env(//' | sed 's/)$//' | sed 's/default:[^:]*:string://' | sort -u)
    
    # Extract vars from generate-env-file.sh
    SCRIPT_VARS=$(grep -A 20 "REQUIRED_SECRETS=" scripts/deployment/generate-env-file.sh | grep '".*"' | sed 's/.*"\(.*\)".*/\1/' | sort -u)
    
    # Check if all services vars are in the script
    MISSING_IN_SCRIPT=""
    for var in $SERVICES_VARS; do
        if ! echo "$SCRIPT_VARS" | grep -q "^${var}$"; then
            MISSING_IN_SCRIPT="$MISSING_IN_SCRIPT $var"
        fi
    done
    
    if [ -z "$MISSING_IN_SCRIPT" ]; then
        print_status $GREEN "‚úÖ Environment generation script includes all required variables"
    else
        print_status $RED "‚ùå Environment generation script missing variables: $MISSING_IN_SCRIPT"
        echo "Update scripts/deployment/generate-env-file.sh to include all required variables"
        VALIDATION_FAILED=true
    fi
else
    print_status $YELLOW "‚ö†Ô∏è  Environment generation script not found"
fi

# 8. Validate that staged files don't break the build
print_status $YELLOW "üî® Testing Docker build with staged changes..."
if git diff --cached --name-only | grep -q "backend/"; then
    # Save working directory state (only if there are unstaged changes)
    STASH_NAME="pre-commit-temp-$(date +%s)"
    HAS_UNSTAGED_CHANGES=false
    
    if ! git diff --quiet; then
        git stash push -m "$STASH_NAME" --include-untracked > /dev/null 2>&1
        HAS_UNSTAGED_CHANGES=true
    fi
    
    # Test build with staged changes
    if docker build -f backend/.docker/Dockerfile --target=development backend/ > /dev/null 2>&1; then
        print_status $GREEN "‚úÖ Docker build test passed"
    else
        print_status $RED "‚ùå Docker build would fail with staged changes"
        VALIDATION_FAILED=true
    fi
    
    # Restore working directory state if we stashed changes
    if [ "$HAS_UNSTAGED_CHANGES" = true ] && git stash list | grep -q "$STASH_NAME"; then
        git stash pop > /dev/null 2>&1 || true
    fi
else
    print_status $GREEN "‚úÖ No backend changes to test"
fi

# Final validation result
echo ""
if [ "$VALIDATION_FAILED" = true ]; then
    print_status $RED "‚ùå Pre-commit validation FAILED"
    echo ""
    echo "Please fix the issues above before committing."
    echo "Common fixes:"
    echo "  - Run: ./scripts/validate-setup.sh"
    echo "  - Run: ./scripts/docker-php.sh update"
    echo "  - Run: ./scripts/build-deps-image.sh (if dependencies changed)"
    echo "  - Update documentation to match configuration"
    echo "  - Ensure Docker socket mounts are configured"
    echo "  - Update environment generation script with all required variables"
    echo ""
    exit 1
else
    print_status $GREEN "‚úÖ All pre-commit validations PASSED"
    echo ""
    echo "üéâ Ready to commit!"
fi

exit 0 