version: '3.8'

services:
  # Frontend service (public-facing)
  dashboard-frontend:
    image: harbor.patricklehmann.dev/dashboard/frontend:latest
    build:
      context: frontend
      dockerfile: .docker/Dockerfile
      target: production
    ports:
      - target: 80
        published: 3001
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 1
        delay: 10s
        order: stop-first
        failure_action: pause
        monitor: 30s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - dashboard-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "com.docker.stack.description=Dashboard Frontend (React + Nginx)"
      - "com.docker.stack.namespace=dashboard"
      - "com.docker.stack.maintainer=Patrick Lehmann"
      - "com.docker.stack.version=1.0.0"
    depends_on:
      - dashboard-backend

  # Backend service (internal only)
  dashboard-backend:
    image: harbor.patricklehmann.dev/dashboard/backend:latest
    build:
      context: backend
      dockerfile: .docker/Dockerfile
      target: production
      args:
        DOCKER_GID: 986
    # No external ports - only accessible via internal network
    configs:
      - source: dashboard_env
        target: /app/.env
        uid: '1000'
        gid: '1000'
        mode: 0600
    volumes:
      # Mount Docker socket for container monitoring (read-only)
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      replicas: 2
      placement:
        constraints:
          # Ensure containers run on manager nodes for Docker API access
          - node.role == manager
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 1
        delay: 10s
        order: stop-first
        failure_action: pause
        monitor: 30s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - dashboard-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "com.docker.stack.description=Dashboard Backend API (Symfony + PHP)"
      - "com.docker.stack.namespace=dashboard"
      - "com.docker.stack.maintainer=Patrick Lehmann"
      - "com.docker.stack.version=1.0.0"
  # Note: MySQL database is external (standalone container)
  # Container name: dashboard-mysql
  # Network: dashboard-network
  # Connection: mysql://dashboard:password@dashboard-mysql:3306/dashboard

networks:
  dashboard-network:
    # Use existing external network created by MySQL setup script
    external: true
    labels:
      - "com.docker.stack.description=Dashboard Network (External)"
      - "com.docker.stack.namespace=dashboard"

# Note: No database secrets needed since using external MySQL container
# The DATABASE_URL in the environment config should point to: dashboard-mysql:3306

configs:
  dashboard_env:
    external: true 