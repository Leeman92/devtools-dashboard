name: Deploy My Dashboard

on:
  push:
    branches: [main]

env:
  VAULT_VERSION: "1.19.4"
  VAULT_SHA256: "d8621f31427ecb6712923fc2db207b3b3c04711b722b11f34627cd4cf837a9c6"

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: harbor.patricklehmann.dev/dashboard/dashboard:latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Prepare cache directory
        run: |
          mkdir -p /tmp/.buildx-cache
      
      - name: Install Vault CLI
        run: |
          echo "Installing Vault CLI version ${{ env.VAULT_VERSION }}"
          curl -fsSL https://releases.hashicorp.com/vault/${{ env.VAULT_VERSION }}/vault_${{ env.VAULT_VERSION }}_linux_amd64.zip -o vault.zip
          echo "${{ env.VAULT_SHA256 }}  vault.zip" | sha256sum -c
          unzip vault.zip
          sudo mv vault /usr/local/bin/vault
          echo "Installed Vault version:"
          vault version

      - name: Get GitHub OIDC token
        id: oidc
        run: |
          echo "Fetching OIDC token from GitHub..."
          OIDC_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value')
          echo "::add-mask::$OIDC_TOKEN"
          echo "OIDC_TOKEN=$OIDC_TOKEN" >> $GITHUB_ENV

      - name: Authenticate with Vault using OIDC
        id: vault-auth
        run: |
          export VAULT_ADDR="${{ secrets.VAULT_ADDR }}"
          export JWT="${{ env.OIDC_TOKEN }}"
      
          echo "Logging into Vault..."
          LOGIN_RESPONSE=$(echo "{\"jwt\": \"$JWT\", \"role\": \"github-actions\"}" | \
            curl -s --request POST --data @- "$VAULT_ADDR/v1/auth/jwt/login")

          echo "$LOGIN_RESPONSE"

          VAULT_TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.auth.client_token')

          if [[ "$VAULT_TOKEN" == "null" || -z "$VAULT_TOKEN" ]]; then
            echo "Vault login failed"
            exit 1
          fi

          echo "::add-mask::$VAULT_TOKEN"
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - name: Read secrets from Vault
        run: |
          export VAULT_ADDR="${{ secrets.VAULT_ADDR }}"
          export VAULT_TOKEN="${{ env.VAULT_TOKEN }}"

          echo "Fetching secrets from Vault..."
          echo "HARBOR_USERNAME=$(vault kv get -field=HARBOR_USERNAME ci/github)" >> $GITHUB_ENV
          echo "HARBOR_PASSWORD=$(vault kv get -field=HARBOR_PASSWORD ci/github)" >> $GITHUB_ENV

      - name: Log in to Harbor
        uses: docker/login-action@v3
        with:
          registry: harbor.patricklehmann.dev
          username: ${{ env.HARBOR_USERNAME }}
          password: ${{ env.HARBOR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/.docker/Dockerfile
          target: production
          push: true
          tags: harbor.patricklehmann.dev/dashboard/dashboard:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          if [ -d /tmp/.buildx-cache-new ]; then
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: build

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Vault CLI
        run: |
          echo "Installing Vault CLI version ${{ env.VAULT_VERSION }}"
          curl -fsSL https://releases.hashicorp.com/vault/${{ env.VAULT_VERSION }}/vault_${{ env.VAULT_VERSION }}_linux_amd64.zip -o vault.zip
          echo "${{ env.VAULT_SHA256 }}  vault.zip" | sha256sum -c
          unzip vault.zip
          sudo mv vault /usr/local/bin/vault
          echo "Installed Vault version:"
          vault version

      - name: Get GitHub OIDC token
        id: oidc
        run: |
          echo "Fetching OIDC token from GitHub..."
          OIDC_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value')
          echo "::add-mask::$OIDC_TOKEN"
          echo "OIDC_TOKEN=$OIDC_TOKEN" >> $GITHUB_ENV

      - name: Authenticate with Vault using OIDC
        id: vault-auth
        run: |
          export VAULT_ADDR="${{ secrets.VAULT_ADDR }}"
          export JWT="${{ env.OIDC_TOKEN }}"
      
          echo "Logging into Vault..."
          LOGIN_RESPONSE=$(echo "{\"jwt\": \"$JWT\", \"role\": \"github-actions\"}" | \
            curl -s --request POST --data @- "$VAULT_ADDR/v1/auth/jwt/login")

          echo "$LOGIN_RESPONSE"

          VAULT_TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.auth.client_token')

          if [[ "$VAULT_TOKEN" == "null" || -z "$VAULT_TOKEN" ]]; then
            echo "Vault login failed"
            exit 1
          fi

          echo "::add-mask::$VAULT_TOKEN"
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - name: Read secrets from Vault
        run: |
          export VAULT_ADDR="${{ secrets.VAULT_ADDR }}"
          export VAULT_TOKEN="${{ env.VAULT_TOKEN }}"

          echo "Fetching secrets from Vault..."
          echo "SERVER_IP=$(vault kv get -field=SERVER_IP ci/github)" >> $GITHUB_ENV
          echo "SERVER_PORT=$(vault kv get -field=SERVER_PORT ci/github)" >> $GITHUB_ENV
          printf "SSH_PRIVATE_KEY<<__EOT__\n%s\n__EOT__\n" "$(vault kv get -field=SSH_PRIVATE_KEY ci/github)" >> "$GITHUB_ENV"

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_IP }}
          username: patrick
          port: ${{ env.SERVER_PORT }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          source: "docker-stack.yml"
          target: "/home/patrick/dashboard"
          strip_components: 0

      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SERVER_IP }}
          username: patrick
          port: ${{ env.SERVER_PORT }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          command_timeout: 5m
          script: |
            set -e
            echo "Starting deployment..."
            
            # Check if Vault is installed on the server and show version
            if command -v vault &> /dev/null; then
              echo "Vault is installed on server. Version:"
              vault version
            else
              echo "Vault is not installed on this server"
            fi

            if ! docker info | grep -q "Swarm: active"; then
              echo "Initializing Docker Swarm..."
              docker swarm init
            fi

            echo "Setting up network..."
            docker network create --driver overlay dashboard-network || true

            echo "Cleaning up old images..."
            docker image prune -f --filter "until=24h"

            echo "Pulling latest image..."
            docker pull harbor.patricklehmann.dev/dashboard/dashboard:latest

            echo "Deploying stack..."
            cd /home/patrick/dashboard
            docker stack deploy -c docker-stack.yml dashboard

            echo "Waiting for services to be ready..."
            timeout=120
            while [ $timeout -gt 0 ]; do
              if docker service ls | grep dashboard_dashboard | grep -q "2/2"; then
                echo "All replicas are running!"
                break
              fi
              sleep 2
              timeout=$((timeout-2))
            done

            if [ $timeout -eq 0 ]; then
              echo "Service deployment failed!"
              docker service logs dashboard_dashboard
              exit 1
            fi

            echo "Verifying deployment..."
            sleep 10

            if ! docker service ls | grep dashboard_dashboard | grep -q "2/2"; then
              echo "Service health check failed!"
              docker service logs dashboard_dashboard
              exit 1
            fi

            unhealthy_containers=$(docker ps --filter "health=unhealthy" --filter "name=dashboard" --format "{{.Names}}")
            if [ ! -z "$unhealthy_containers" ]; then
              echo "Found unhealthy containers:"
              echo "$unhealthy_containers"
              docker service logs dashboard_dashboard
              exit 1
            fi

            echo "Deployment completed successfully!"
