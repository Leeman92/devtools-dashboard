name: Deploy My Dashboard

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Vault CLI
        run: |
          curl -fsSL https://releases.hashicorp.com/vault/1.15.4/vault_1.15.4_linux_amd64.zip -o vault.zip
          unzip vault.zip
          sudo mv vault /usr/local/bin/vault

      - name: Request GitHub OIDC token
        id: generate_token
        uses: actions/github-script@v7
        with:
          script: |
            return {
              token: process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN,
              url: process.env.ACTIONS_ID_TOKEN_REQUEST_URL
            }

      - name: TEMP DEBUG â€“ Request and print GitHub OIDC token
        id: print_jwt
        run: |
          echo "Requesting OIDC token from GitHub..."
          echo "TOKEN: ${{ steps.generate_token.outputs.token }}"
          echo "URL: ${{ steps.generate_token.outputs.url }}"

      - name: Read secrets from Vault
        run: |
          export VAULT_ADDR="${{ secrets.VAULT_ADDR }}"
          export VAULT_TOKEN="${{ env.VAULT_TOKEN }}"

          echo "Fetching secrets from Vault..."
          echo "SERVER_IP=$(vault read -field=data.SERVER_IP ci/data/github)" >> $GITHUB_ENV
          echo "SERVER_PORT=$(vault read -field=data.SERVER_PORT ci/data/github)" >> $GITHUB_ENV
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          vault read -field=data.SSH_PRIVATE_KEY ci/data/github >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_IP }}
          username: patrick
          port: ${{ env.SERVER_PORT }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          source: "docker-stack.yml"
          target: "/home/patrick/dashboard"
          strip_components: 0

      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SERVER_IP }}
          username: patrick
          port: ${{ env.SERVER_PORT }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          command_timeout: 5m
          script: |
            set -e
            echo "Starting deployment..."

            if ! docker info | grep -q "Swarm: active"; then
              echo "Initializing Docker Swarm..."
              docker swarm init
            fi

            echo "Setting up network..."
            docker network create --driver overlay dashboard-network || true

            echo "Cleaning up old images..."
            docker image prune -f --filter "until=24h"

            echo "Pulling latest image..."
            docker pull harbor.patricklehmann.dev/dashboard/dashboard:latest

            echo "Deploying stack..."
            cd /home/patrick/dashboard
            docker stack deploy -c docker-stack.yml dashboard

            echo "Waiting for services to be ready..."
            timeout=120
            while [ $timeout -gt 0 ]; do
              if docker service ls | grep dashboard_dashboard | grep -q "2/2"; then
                echo "All replicas are running!"
                break
              fi
              sleep 2
              timeout=$((timeout-2))
            done

            if [ $timeout -eq 0 ]; then
              echo "Service deployment failed!"
              docker service logs dashboard_dashboard
              exit 1
            fi

            echo "Verifying deployment..."
            sleep 10

            if ! docker service ls | grep dashboard_dashboard | grep -q "2/2"; then
              echo "Service health check failed!"
              docker service logs dashboard_dashboard
              exit 1
            fi

            unhealthy_containers=$(docker ps --filter "health=unhealthy" --filter "name=dashboard" --format "{{.Names}}")
            if [ ! -z "$unhealthy_containers" ]; then
              echo "Found unhealthy containers:"
              echo "$unhealthy_containers"
              docker service logs dashboard_dashboard
              exit 1
            fi

            echo "Deployment completed successfully!"
