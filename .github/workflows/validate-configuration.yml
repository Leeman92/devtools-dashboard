name: 'Validate Configuration & Documentation'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate-configuration:
    name: 'Configuration Validation'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Docker Buildx'
        uses: docker/setup-buildx-action@v3
        
      - name: 'Validate Setup'
        run: |
          chmod +x scripts/validate-setup.sh
          ./scripts/validate-setup.sh
          
      - name: 'Validate Composer Files'
        run: |
          cd backend
          docker run --rm -v "$(pwd):/app" -w /app composer:latest validate --strict
          
      - name: 'Check Docker Socket Configuration'
        run: |
          echo "üê≥ Checking Docker socket configuration..."
          
          # Check docker-compose.yml
          if grep -q "/var/run/docker.sock:/var/run/docker.sock:ro" docker-compose.yml; then
            echo "‚úÖ docker-compose.yml has Docker socket mount"
          else
            echo "‚ùå docker-compose.yml missing Docker socket mount"
            exit 1
          fi
          
          # Check docker-stack.yml
          if grep -q "/var/run/docker.sock:/var/run/docker.sock:ro" docker-stack.yml && \
             grep -q "node.role == manager" docker-stack.yml; then
            echo "‚úÖ docker-stack.yml has proper Docker socket configuration"
          else
            echo "‚ùå docker-stack.yml missing Docker socket mount or manager constraint"
            exit 1
          fi
          
      - name: 'Validate Environment Documentation'
        run: |
          echo "üåç Checking environment variable documentation..."
          
          # Extract required vars from services.yaml
          REQUIRED_VARS=$(grep -o "env([^)]*)" backend/config/services.yaml | sed 's/env(string://' | sed 's/env(//' | sed 's/)$//' | sed 's/default:[^:]*:string://' | sort -u)
          
          # Check if all required vars are documented
          MISSING_VARS=""
          for var in $REQUIRED_VARS; do
            if ! grep -q "$var" backend/README.md; then
              MISSING_VARS="$MISSING_VARS $var"
            fi
          done
          
          if [ -z "$MISSING_VARS" ]; then
            echo "‚úÖ All environment variables are documented"
          else
            echo "‚ùå Missing environment variables in documentation: $MISSING_VARS"
            exit 1
          fi
          
      - name: 'Check .cursorrules Best Practices'
        run: |
          echo "üìù Checking .cursorrules for Docker socket guidelines..."
          if grep -q "Mount Docker socket read-only" .cursorrules && \
             grep -q "manager node constraints" .cursorrules; then
            echo "‚úÖ .cursorrules includes Docker socket best practices"
          else
            echo "‚ùå .cursorrules missing Docker socket best practices"
            exit 1
          fi
          
      - name: 'Test Docker Build'
        run: |
          echo "üî® Testing Docker build..."
          docker build -f backend/.docker/Dockerfile --target=development backend/
          
      - name: 'Validate API Documentation'
        run: |
          echo "üîó Checking API endpoint documentation..."
          
          # Check if major routes are documented
          MAJOR_ROUTES="/api/docker/services /api/github /api/infrastructure/health"
          MISSING_ROUTES=""
          
          for route in $MAJOR_ROUTES; do
            if ! grep -q "$route" backend/README.md; then
              MISSING_ROUTES="$MISSING_ROUTES $route"
            fi
          done
          
          if [ -z "$MISSING_ROUTES" ]; then
            echo "‚úÖ Major API routes are documented"
          else
            echo "‚ö†Ô∏è  Some API routes may need documentation updates: $MISSING_ROUTES"
            # Don't fail the build for this, just warn
          fi
          
      - name: 'Check Documentation Consistency'
        run: |
          echo "üìö Checking documentation consistency..."
          
          # Check if QUICK_REFERENCE.md mentions Docker socket troubleshooting
          if grep -q "Socket access denied" QUICK_REFERENCE.md && \
             grep -q "docker-compose.yml/docker-stack.yml" QUICK_REFERENCE.md; then
            echo "‚úÖ QUICK_REFERENCE.md includes Docker socket troubleshooting"
          else
            echo "‚ùå QUICK_REFERENCE.md missing Docker socket troubleshooting"
            exit 1
          fi
          
          # Check if README.md has Docker socket section
          if grep -q "Docker Socket Access" backend/README.md && \
             grep -q "manager nodes" backend/README.md; then
            echo "‚úÖ README.md includes Docker socket documentation"
          else
            echo "‚ùå README.md missing comprehensive Docker socket documentation"
            exit 1
          fi
          
      - name: 'Validation Summary'
        if: success()
        run: |
          echo ""
          echo "üéâ All configuration and documentation validations PASSED!"
          echo ""
          echo "‚úÖ Setup validation"
          echo "‚úÖ Composer files validation"
          echo "‚úÖ Docker socket configuration"
          echo "‚úÖ Environment variable documentation"
          echo "‚úÖ .cursorrules best practices"
          echo "‚úÖ Docker build test"
          echo "‚úÖ API documentation"
          echo "‚úÖ Documentation consistency" 